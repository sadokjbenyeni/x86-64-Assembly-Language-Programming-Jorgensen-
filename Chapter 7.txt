1) Which of the following instructions is legal / illegal? As appropriate, provide an explanation.
    1. mov     rax, 54      LEGAL
    2. mov     ax, 54       LEGAL
    3. mov     al, 354      ILLEGAL
    4. mov     rax, r11     LEGAL
    5. mov     rax, r11d    ILLEGAL
    6. mov     54, ecx      ILLEGAL
    7. mov     rax, qword [qVar]  LEGAL
    8. mov     rax, qword [bVar]  LEGAL
    9. mov     rax, [qVar]  LEGAL
    10. mov    rax, qVar    LEGAL
    11. mov    eax, dword [bVar] LEGAL
    12. mov    qword [qVar2], qword [qVar1] ILLEGAL
    13. mov    qword [bVar2], qword [qVar1] ILLEGAL
    14. mov    r15, 54  LEGAL
    15. mov    r16, 54  ILLEGAL
    16. mov    r11b, 54 LEGAL

2) Explain what each of the following instructions does.
1. movzx     rsi, byte [bVar1] ; Unsigned widening conversion 
2. movsx     rsi, byte [bVar1] ; Signed widening conversion

3) What instruction is used to:
convert an unsigned byte in al into a word in ax.; mov ah, 0
convert a signed byte in al into a word in ax.; cbw

4) What instruction is used to:
convert an unsigned word in ax into a double-word in eax.; movzx eax, ax
convert a signed word in ax into a double-word in eax.; cwde

5) What instruction is used to:
convert an unsigned word in ax into a double-word in dx:ax.; mov dx, 0
convert a signed word in ax into a double-word in dx:ax.; cwd

6) Explain the difference between the cwd instruction and the movsx instructions.
cwd: Convert word in ax into double-word in dx:ax.   
movsx: Copies the word source operand into the double-word destination operand.   

7) Explain why the explicit type specification (dword in this example) is required on the first instruction and is not required on the second instruction.
1. add    dword [dVar], 1 ; Because immediate value 1 could be placed in any type.
2. add    [dVar], eax ; Because type can be deduced from eax which is a double word.

8) Given the following code fragment:
    mov    rax, 9 
    mov    rbx, 2 
    add    rbx, rax 
What would be in the rax and rbx registers after execution? Show answer in hex, full register size.
    rax = 0x0000 0000 0000 0009
    rbx = 0x0000 0000 0000 000B

9) Given the following code fragment:
    mov    rax, 9 
    mov    rbx, 2 
    sub    rax, rbx 
What would be in the rax and rbx registers after execution? Show answer in hex, full register size.
    rax = 0x0000 0000 0000 0007
    rbx = 0x0000 0000 0000 0002

10) Given the following code fragment:
    mov    rax, 9 
    mov    rbx, 2 
    sub    rbx, rax 
What would be in the rax and rbx registers after execution? Show answer in hex, full register size.
    rax = 0x0000 0000 0000 0009
    rbx = 0xFFFF FFFF FFFF FFF9

11) Given the following code fragment:
    mov    rax, 4
    mov    rbx, 3
    imu1   rbx 
What would be in the rax and rdx registers after execution? Show answer in hex, full register size.
    rax = 0x0000 0000 0000 000C
    rdx = 0x0000 0000 0000 0000

12) Given the following code fragment:
    mov    rax, 5
    cqo
    mov    rbx, 3
    idiv   rbx 
What would be in the rax and rdx registers after execution? Show answer in hex, full register size.
    rax = 0x0000 0000 0000 0001
    rdx = 0x0000 0000 0000 0002

13) Given the following code fragment:
    mov   rax, 11
    cqo
    mov   rbx, 4
    idiv  rbx
What would be in the rax and rdx registers after execution? Show answer in hex, full register size.
    rax = 0x0000 0000 0000 0002
    rdx = 0x0000 0000 0000 0003

14) Explain why each of the following statements will not work.
    1. mov    42, eax ; Assignement to immediate not allowed.
    2. div    3 ; Operation on immediate not allowed.
    3. mov    dword [num1], dword [num1] ; Move from memory to memory not allowed.
    4. mov    dword [ax], 800 ; 64-bits will not fit in ax register

15)  The idiv instruction will divide by edx:eax and edx was not set.

16)  The operands for the divide a signed (-500), but an unsigned divide is used.

17)  The word divide used will place the result in the dx:ax registers, but the eax register is used to obtain the result.

18) The three-operand multiply instructions are only allowed for a limited set of signed multiplication operations.